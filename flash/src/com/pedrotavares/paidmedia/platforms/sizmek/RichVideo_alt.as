package com.pedrotavares.paidmedia.platforms.sizmek{	// CUSTOM CLASS IMPORTS	import com.pedrotavares.paidmedia.platforms.sizmek.*;	import com.pedrotavares.paidmedia.events.PaidMediaEvent;	// SIZMEK IMPORTS	import eyeblaster.videoPlayer.VideoScreen;	import eyeblaster.events.*;	// FLASH IMPORTS	import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.events.Event;		import flash.utils.*;	public class RichVideo_alt extends RichUnit	{		// create an instance of VideoScreen named _videoScreenInst		protected var _videoScreenInst			:VideoScreen;				protected var isVidPlaying				:Boolean;		protected var isMuted					:Boolean = true;				protected var vidEntry					:Number;		protected var videoHolder				:MovieClip;		protected var vidCntrl					:MovieClip;		protected var vidSound					:MovieClip;		protected var vidRply					:MovieClip;		protected var vidWidth					:int;		protected var vidHeight					:int;		protected var vidX						:int;		protected var vidY						:int;		protected var vidName					:String;// IS THIS NEEDED?		public function RichVideo_alt()		{			trace("[VIDEO] All good"); 			// Wait for when the EB component has started			addEventListener( PaidMediaEvent.UNIT_INITIALISED, unitStarted );		}		private function unitStarted( e:PaidMediaEvent ):void		{			trace("[VIDEO] Caught UNIT_INITIALISED");						// create an instance of VideoLoader named _videoScreenInst			//_videoScreenInst = new VideoScreen();						// set some properties of the instance			//_videoScreenInst.initComponentProperties = setComponentProperties;						// add _videoScreenInst to the stage			//videoHolder.addChild(_videoScreenInst);			//_videoScreenInst.initialize(1);								}		protected function setupVideo( vidEntry, videoHolder:MovieClip, vidCntrl:MovieClip, vidSound:MovieClip, vidRply:MovieClip=null, vidWidth:int=100, vidHeight:int=100, vidX:int=0, vidY:int=0 ):void		{			// Define video stats for future use:			this.vidEntry = vidEntry;			this.videoHolder = videoHolder;			this.vidCntrl = vidCntrl; 			this.vidSound = vidSound;			this.vidRply = vidRply;			this.vidWidth = vidWidth;			this.vidHeight = vidHeight;			this.vidX = vidX;			this.vidY = vidY;			this.vidName = vidName;						// Video Player setup			_videoScreenInst = new VideoScreen();			videoHolder.addChild(_videoScreenInst);			// Wait until component is ready						/*if( _videoScreenInst ) {				trace("[VIDEO] _videoScreenInst exists");				videoReady();							} else {				trace("[VIDEO ] _videoScreenInst DOES NOT exist");				_videoScreenInst.addEventListener(Event.INIT, videoReady );			}*/									// Listen for the end of the video and cue points			_videoScreenInst.addEventListener(EBVideoEvent.MOVIE_END, onVideoEnd);			_videoScreenInst.addEventListener(EBMetadataEvent.CUE_POINT, onCue);									_videoScreenInst.name = "_videoScreenInst";			_videoScreenInst.muteOnVideoStart = true;			//_videoScreenInst.pauseOnLastFrame = false;			// Video starts muted			isMuted = true;			/*trace(_videoScreenInst);			var description:XML = describeType(_videoScreenInst);            trace(description..accessor.@name.toXMLString());*/			// Video to play			//_videoScreenInst.load(vidEntry);			_videoScreenInst.loadAndPlay(vidEntry);			_videoScreenInst.width = vidWidth;			_videoScreenInst.height = vidHeight;			_videoScreenInst.x = vidX;			_videoScreenInst.y = vidY;									var currID = _videoScreenInst.currentAssetId;			EBBase.UserActionCounter( currID);			// Make sure the video controls are on the correct frame			vidCntrl.gotoAndStop(1);			vidSound.gotoAndStop(1);			vidRply.gotoAndStop(1);			// Listen to the buttons on stage			addEventListener( PaidMediaEvent.CLICK_CLICKTAG, onClick );			vidCntrl.addEventListener( MouseEvent.CLICK, toggleVideo );			vidSound.addEventListener( MouseEvent.CLICK, toggleSound );			vidRply.addEventListener( MouseEvent.CLICK, replayVideo );			vidCntrl.buttonMode = vidSound.buttonMode = vidRply.buttonMode = true;			/*// add _videoScreenInst to the stage			videoHolder.addChild(_videoScreenInst);*/			// Put the clicktag on top of the video;			// The clicktag instance comes from the "DgRich.as" class			setChildIndex(clicktag_mc, numChildren-1);			// Put the video controls on top of the clicktag			setChildIndex(vidCntrl, numChildren-1);			setChildIndex(vidSound, numChildren-1);			setChildIndex(vidRply, numChildren-1);		}				protected function setupVideoLocal( vidEntry:Number, videoHolder:MovieClip, vidCntrl:MovieClip, vidSound:MovieClip, vidRply:MovieClip=null, vidWidth:int=100, vidHeight:int=100, vidX:int=0, vidY:int=0 ):void		{			/*////////////////////////////////////			/////////////////////////////////////			//THIS IS STILL NOT WORKING OFFLINE//			/////////////////////////////////////			///////////////////////////////////*/			// Define video stats for future use:			this.vidEntry = vidEntry;			this.videoHolder = videoHolder;			this.vidCntrl = vidCntrl; 			this.vidSound = vidSound;			this.vidRply = vidRply;			this.vidWidth = vidWidth;			this.vidHeight = vidHeight;			this.vidX = vidX;			this.vidY = vidY;			this.vidName = vidName;						// Video Player setup			_videoScreenInst = new VideoScreen();			videoHolder.addChild(_videoScreenInst);			// Wait until component is ready						if( _videoScreenInst ) {				trace("[VIDEO] _videoScreenInst exists");				videoReady();							} else {				trace("[VIDEO ] _videoScreenInst DOES NOT exist");				_videoScreenInst.addEventListener(Event.INIT, videoReady );			}									// Listen for the end of the video and cue points			_videoScreenInst.addEventListener(EBVideoEvent.MOVIE_END, onVideoEnd);			_videoScreenInst.addEventListener(EBMetadataEvent.CUE_POINT, onCue);									/*_videoScreenInst.name = "_videoScreenInst";			_videoScreenInst.muteOnVideoStart = true;			//_videoScreenInst.pauseOnLastFrame = false;			// Video starts muted			isMuted = true;			// Video to play			_videoScreenInst.loadExt(vidEntry);			_videoScreenInst.width = vidWidth;			_videoScreenInst.height = vidHeight;			_videoScreenInst.x = vidX;			_videoScreenInst.y = vidY;*/			// Make sure the video controls are on the correct frame			vidCntrl.gotoAndStop(1);			vidSound.gotoAndStop(1);			vidRply.gotoAndStop(1);			// Listen to the buttons on stage			//addEventListener( PaidMediaEvent.CLICK_CLICKTAG, dgVideoClick );			vidCntrl.addEventListener( MouseEvent.CLICK, toggleVideo );			vidSound.addEventListener( MouseEvent.CLICK, toggleSound );			vidRply.addEventListener( MouseEvent.CLICK, replayVideo );			vidCntrl.buttonMode = vidSound.buttonMode = vidRply.buttonMode = true;			/*// add _videoScreenInst to the stage			videoHolder.addChild(_videoScreenInst);			// Put the clicktag on top of the video;			// The clicktag instance comes from the "DgRich.as" class			setChildIndex(clicktag_mc, numChildren-1);			// Put the video controls on top of the clicktag			setChildIndex(vidCntrl, numChildren-1);			setChildIndex(vidSound, numChildren-1);			setChildIndex(vidRply, numChildren-1);*/		}				private function videoReady():void		{			//_videoScreenInst.load(1);			trace("[VIDEO] >>>>>>>>>>> video is ready");						_videoScreenInst.name = "_videoScreenInst";			_videoScreenInst.muteOnVideoStart = true;			//_videoScreenInst.pauseOnLastFrame = false;			// Video starts muted			isMuted = true;						//			// Add the ability to discern if loading locally or not			//						// Video to play			_videoScreenInst.load(vidEntry);						// Video to play			//_videoScreenInst.loadExt(vidEntry);			//_videoScreenInst.loadAndPlayExt(vidEntry);						_videoScreenInst.width = vidWidth;			_videoScreenInst.height = vidHeight;			_videoScreenInst.x = vidX;			_videoScreenInst.y = vidY;						// add _videoScreenInst to the stage			/*videoHolder.addChild(_videoScreenInst);*/			// Put the clicktag on top of the video;			// The clicktag instance comes from the "DgRich.as" class			setChildIndex(clicktag_mc, numChildren-1);			// Put the video controls on top of the clicktag			setChildIndex(vidCntrl, numChildren-1);			setChildIndex(vidSound, numChildren-1);			setChildIndex(vidRply, numChildren-1);		}		private function ebVideoClick(e:PaidMediaEvent):void		{			// Check to see if the video is playing			if (isVidPlaying)			{				//trace( "[VIDEO] Video is playing");				// Stop and remove video				//removeVideo();			}			else			{				//trace( "[VIDEO] Video is NOT playing");				// Do nothing, the clicktag has been actioned			}		}				protected function playVideo():void		{			EBBase.UserActionCounter("playVideo");			trace(_videoScreenInst);			//var description:XML = describeType(_videoScreenInst);           // trace(description..accessor.@name.toXMLString());						//trace(">>>>>>>>>>>>>>>>>>>>>>", _videoScreenInst.isPaused);			//trace("[VIDEO] Play video");			// The video is now playing			isVidPlaying = true;			// Toggles which movie clip to show			//vidCntrl.gotoAndStop(1);			// Make sure the video is visible;			_videoScreenInst.visible = true;			// Start playing the video;			//_videoScreenInst.play();		}				protected function pauseVideo():void		{			isVidPlaying = false;			// Toggles which movie clip to show			vidCntrl.gotoAndStop(2);			// Pause the video;			_videoScreenInst.pause();		}		private function replayVideo(e:MouseEvent):void		{			//trace("Replay Clicked");			dispatchEvent(new PaidMediaEvent(PaidMediaEvent.VIDEO_REPLAY));			//Restart the video			_videoScreenInst.seek(0);		}				private function toggleVideo(e:MouseEvent):void		{			//trace("Video toggle");			// Checks to see if the video is playing			if (! isVidPlaying)			{				//trace("Play it");				// Yes it is, unpause it				playVideo();			}			else			{				//trace("Pause it");				// No it isn't, pause it				pauseVideo();			}		}				private function toggleSound(e:MouseEvent):void		{			// Toggle the audio on/off			_videoScreenInst.audioToggle();			// Checks to see if it should mute or unmute			if (isMuted)			{				//trace("Unmute it");				// Yes it is, unmute it				isMuted = false;				// Toggles which movie clip to show;				vidSound.gotoAndStop(2);			}			else			{				//trace("Mute it");				// No it isn't, mute it				isMuted = true;				// Toggles which movie clip to show;				vidSound.gotoAndStop(1);			}		}		private function onCue(info):void		{			// TO DO		}		private function onVideoEnd(e:EBVideoEvent=null):void		{			//trace("onVideoEnd");			dispatchEvent(new PaidMediaEvent(PaidMediaEvent.ON_VIDEO_END));		}		/*protected function removeVideo():void		{			// Video is no longer playing			isVidPlaying = false;			// Hide video			_videoScreenInst.visible = false;			// Hide controls			//vidCntrl.visible = false;			//vidSound.visible = false;			// Show replay button			vidRply.visible = true;			// Make sure the video is stopped			_videoScreenInst.stop();		}*/				protected function stopVideo():void		{			// Hide video			_videoScreenInst.visible = false;			// Make sure the video is stopped			_videoScreenInst.stop();			// Dispatch the event the video is over			onVideoEnd();		}	}}