package com.pedrotavares.paidmedia.platforms.sizmek{	// CUSTOM CLASS IMPORTS	import com.pedrotavares.paidmedia.platforms.sizmek.EbRich;	import com.pedrotavares.paidmedia.events.PaidMediaEvent;	// DG IMPORTS	import eyeblaster.videoPlayer.VideoScreen;	import eyeblaster.events.*;	// FLASH IMPORTS	import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.events.Event;	public class EbVideoScreen extends EbRich	{		// create an instance of VideoScreen named _videoScreenInst		protected var _videoScreenInst;				protected var isVidPlaying:Boolean;		protected var isMuted:Boolean = true;		protected var videoHolder:MovieClip;		protected var vidCntrl:MovieClip;		protected var vidSound:MovieClip;		protected var vidRply:MovieClip;		public function EbVideoScreen()		{			// create an instance of VideoScreen named _videoScreenInst			_videoScreenInst = new VideoScreen(true);			// set some properties of the instance			//_videoScreenInst.initComponentProperties = setComponentProperties;			// Listen for the end of the video and cue points			_videoScreenInst.addEventListener(EBVideoEvent.MOVIE_END, onVideoEnd);			_videoScreenInst.addEventListener(EBMetadataEvent.CUE_POINT, onCue);		}		protected function startEbVideoScreen():void		{			startEbRich();		}		/*private function setComponentProperties():void		{			_videoScreenInst.name = "_videoScreenInst";			_videoScreenInst.muteOnVideoStart = true;			_videoScreenInst.pauseOnLastFrame = false;			// Video starts muted			isMuted = true;		}*/		protected function setupVideo( vidEntry, videoHolder:MovieClip, vidCntrl:MovieClip, vidSound:MovieClip, vidRply:MovieClip=null, vidWidth:int=100, vidHeight:int=100, vidX:int=0, vidY:int=0 ):void		{			_videoScreenInst.name = "_videoScreenInst";			_videoScreenInst.muteOnVideoStart = true;			_videoScreenInst.pauseOnLastFrame = false;			// Video starts muted			isMuted = true;			// Video to play			_videoScreenInst.load(vidEntry);			_videoScreenInst.width = vidWidth;			_videoScreenInst.height = vidHeight;			_videoScreenInst.x = vidX;			_videoScreenInst.y = vidY;			// Assign the video controller movieClip instances to the relevant variable			this.vidCntrl = vidCntrl;			vidCntrl.gotoAndStop(1);			this.vidSound = vidSound;			vidSound.gotoAndStop(1);			this.vidRply = vidRply;			vidRply.gotoAndStop(1);			// Listen to the buttons on stage			addEventListener( PaidMediaEvent.CLICK_CLICKTAG, dgVideoClick );			vidCntrl.addEventListener( MouseEvent.CLICK, toggleVideo );			vidSound.addEventListener( MouseEvent.CLICK, toggleSound );			vidRply.addEventListener( MouseEvent.CLICK, replayVideo );			vidCntrl.buttonMode = vidSound.buttonMode = vidRply.buttonMode = true;			// add _videoScreenInst to the stage			videoHolder.addChild(_videoScreenInst);			// Put the clicktag on top of the video;			// The clicktag instance comes from the "DgRich.as" class			setChildIndex(clicktag_mc, numChildren-1);			// Put the video controls on top of the clicktag			setChildIndex(vidCntrl, numChildren-1);			setChildIndex(vidSound, numChildren-1);			setChildIndex(vidRply, numChildren-1);		}				protected function setupVideoLocal( vidEntry, videoHolder:MovieClip, vidCntrl:MovieClip, vidSound:MovieClip, vidRply:MovieClip=null, vidWidth:int=100, vidHeight:int=100, vidX:int=0, vidY:int=0 ):void		{			_videoScreenInst.name = "_videoScreenInst";			_videoScreenInst.muteOnVideoStart = true;			_videoScreenInst.pauseOnLastFrame = false;			// Video starts muted			isMuted = true;			// Video to play			_videoScreenInst.loadExt(vidEntry);			_videoScreenInst.width = vidWidth;			_videoScreenInst.height = vidHeight;			_videoScreenInst.x = vidX;			_videoScreenInst.y = vidY;			// Assign the video controller movieClip instances to the relevant variable			this.vidCntrl = vidCntrl;			vidCntrl.gotoAndStop(1);			this.vidSound = vidSound;			vidSound.gotoAndStop(1);			this.vidRply = vidRply;			vidRply.gotoAndStop(1);			// Listen to the buttons on stage			addEventListener( PaidMediaEvent.CLICK_CLICKTAG, dgVideoClick );			vidCntrl.addEventListener( MouseEvent.CLICK, toggleVideo );			vidSound.addEventListener( MouseEvent.CLICK, toggleSound );			vidRply.addEventListener( MouseEvent.CLICK, replayVideo );			vidCntrl.buttonMode = vidSound.buttonMode = vidRply.buttonMode = true;			// add _videoScreenInst to the stage			videoHolder.addChild(_videoScreenInst);			// Put the clicktag on top of the video;			// The clicktag instance comes from the "DgRich.as" class			setChildIndex(clicktag_mc, numChildren-1);			// Put the video controls on top of the clicktag			setChildIndex(vidCntrl, numChildren-1);			setChildIndex(vidSound, numChildren-1);			setChildIndex(vidRply, numChildren-1);		}		private function ebVideoClick(e:PaidMediaEvent):void		{			// Check to see if the video is playing			if (isVidPlaying)			{				//trace( "[VIDEO] Video is playing");				// Stop and remove video				//removeVideo();			}			else			{				//trace( "[VIDEO] Video is NOT playing");				// Do nothing, the clicktag has been actioned			}		}				protected function playVideo():void		{			//trace("[VIDEO] Play video");			// The video is now playing			isVidPlaying = true;			// Toggles which movie clip to show			vidCntrl.gotoAndStop(1);			// Make sure the video is visible;			_videoScreenInst.visible = true;			// Start playing the video;			_videoScreenInst.play();		}				protected function pauseVideo():void		{			isVidPlaying = false;			// Toggles which movie clip to show			vidCntrl.gotoAndStop(2);			// Pause the video;			_videoScreenInst.pause();		}		private function replayVideo(e:MouseEvent):void		{			//trace("Replay Clicked");			dispatchEvent(new PaidMediaEvent(PaidMediaEvent.VIDEO_REPLAY));			//Restart the video			_videoScreenInst.seek(0);		}				private function toggleVideo(e:MouseEvent):void		{			//trace("Video toggle");			// Checks to see if the video is playing			if (! isVidPlaying)			{				//trace("Play it");				// Yes it is, unpause it				playVideo();			}			else			{				//trace("Pause it");				// No it isn't, pause it				pauseVideo();			}		}				private function toggleSound(e:MouseEvent):void		{			// Toggle the audio on/off			_videoScreenInst.audioToggle();			// Checks to see if it should mute or unmute			if (isMuted)			{				//trace("Unmute it");				// Yes it is, unmute it				isMuted = false;				// Toggles which movie clip to show;				vidSound.gotoAndStop(2);			}			else			{				//trace("Mute it");				// No it isn't, mute it				isMuted = true;				// Toggles which movie clip to show;				vidSound.gotoAndStop(1);			}		}		private function onCue(info):void		{			// TO DO		}		private function onVideoEnd(e:EBVideoEvent=null):void		{			//trace("onVideoEnd");			dispatchEvent(new PaidMediaEvent(PaidMediaEvent.ON_VIDEO_END));		}		protected function removeVideo():void		{			// Video is no longer playing			isVidPlaying = false;			// Hide video			_videoScreenInst.visible = false;			// Hide controls			//vidCntrl.visible = false;			//vidSound.visible = false;			// Show replay button			vidRply.visible = true;			// Make sure the video is stopped			_videoScreenInst.stop();		}	}}