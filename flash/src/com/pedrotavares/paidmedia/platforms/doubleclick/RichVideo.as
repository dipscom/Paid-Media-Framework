package com.pedrotavares.paidmedia.platforms.doubleclick{	// CUSTOM CLASSE IMPORTS	import com.pedrotavares.paidmedia.platforms.doubleclick.*;	import com.pedrotavares.paidmedia.events.PaidMediaEvent;	// DOUBLECLICK IMPORTS	import com.google.ads.studio.events.StudioVideoEvent;	import com.google.ads.studio.events.StudioEvent;	import com.google.ads.studio.video.*;	// FLASH IMPORTS	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	public class RichVideo extends RichUnit	{		// Video Vars		protected var vidPlayerInstance			:VideoPlayerAdvanced;		protected var playlist					:Playlist;		protected var _videoController			:EnhancedVideoController;		protected var videoEntry				:VideoEntry;				protected var isVidPlaying				:Boolean;		protected var isMuted					:Boolean;				protected var vidEntry					:String;		protected var vidName					:String;		protected var videoHolder				:MovieClip;		protected var vidCntrl					:MovieClip;		protected var vidSound					:MovieClip;		protected var vidRply					:MovieClip;		protected var vidWidth					:int;		protected var vidHeight					:int;		protected var vidX						:int;		protected var vidY						:int;		public function RichVideo()		{			// constructor code			trace("[VIDEO] All good");		}		protected function setupVideo( vidEntry:String, videoHolder:MovieClip, vidCntrl:MovieClip, vidSound:MovieClip, vidRply:MovieClip, vidWidth:int=100, vidHeight:int=100, vidX:int=0, vidY:int=0, vidName:String="Trailer" ):void		{			trace("[VIDEO] SetupVideo");			/* TO DO:			Add a way to have multiple videos per ad - maybe a separate class for it?			Try to have an Array to grab the different video entries			*/			// Define video stats for future use:			this.vidEntry = vidEntry;			this.videoHolder = videoHolder;			this.vidCntrl = vidCntrl; 			this.vidSound = vidSound;			this.vidRply = vidRply;			this.vidWidth = vidWidth;			this.vidHeight = vidHeight;			this.vidX = vidX;			this.vidY = vidY;			this.vidName = vidName;						// Video Player setup			vidPlayerInstance = new VideoPlayerAdvanced();			//			vidPlayerInstance.width = vidWidth;			vidPlayerInstance.height = vidHeight;			vidPlayerInstance.x = vidX;			vidPlayerInstance.y = vidY;			videoHolder.addChild( vidPlayerInstance );						// Make sure the video controls are on the correct frame			vidCntrl.gotoAndStop(1);			vidSound.gotoAndStop(1);			vidRply.gotoAndStop(1);			// Put the clicktag on top of the video			// The clicktag instance comes from the "DoubleclickRich.as" class			addChild( clicktag_mc );			// Put the video controls on top of the clicktag			addChild( vidCntrl );			addChild( vidSound );			addChild( vidRply );			// Event listeners			// Initialization			vidPlayerInstance.addEventListener( StudioEvent.INIT, videoInit );			// Consider adding a buffering listener			//			// Cue points;			vidPlayerInstance.addEventListener( StudioVideoEvent.NET_STREAM_CUE_POINT, onCue );// Check to see if this is still working			// Video controls			vidCntrl.addEventListener( MouseEvent.CLICK, toggleVideo );			vidSound.addEventListener( MouseEvent.CLICK, toggleSound );			// Video replay			vidRply.addEventListener( MouseEvent.CLICK, replayVideo );			vidRply.addEventListener( MouseEvent.MOUSE_OVER, videoMouseOver );			vidRply.addEventListener( MouseEvent.MOUSE_OVER, videoMouseOut );						vidCntrl.buttonMode = vidSound.buttonMode = vidRply.buttonMode = true;			vidCntrl.mouseChildren = vidSound.mouseChildren = vidRply.mouseChildren = false;		}				private function videoInit( e:StudioEvent ):void		{			trace("[VIDEO] video has initialised");						// Playlist setup;			playlist = vidPlayerInstance.getPlaylist();			// Stops the playlist from autoplaying all items;			playlist.setAutoAdvanceVideoOnComplete( false );			// Starts the videos muted;			playlist.setStartMuted( true );						// Create a video entry			videoEntry = new VideoEntry( vidEntry );						// Create a new video controller			_videoController = new EnhancedVideoController();			// Assign the video entry to the video controller			_videoController.addVideoEntry( videoEntry );			// Set the video object			_videoController.setVideoObject( vidPlayerInstance.getVideoObject() );			//			_videoController.setReportingIdentifier( vidName );			// Set the volume to nothing			//_videoController.setVolume(0);			isMuted = true;			// Make sure the video will not show once complete			_videoController.setVideoCompleteDisplay( EnhancedVideoController.VIDEO_COMPLETE_HIDE_VIDEO );			// Set the callback for when the video is complete			_videoController.setVideoCompleteCallback( onVideoEnd );			// Add the video item to the end of the playlist.			vidPlayerInstance.getPlaylist().addVideoController( _videoController );		}				protected function addExtraVideo( vidEntry:String, vidWidth:int=100, vidHeight:int=100, vidX:int=0, vidY:int=0, vidName:String="Trailer" ):void		{			trace( "[VIDEO] Add a new video to the playlist");			// Create a video entry;			videoEntry = new VideoEntry( vidEntry );			// Create a new video controller			_videoController = new EnhancedVideoController();			// Assign the video entry to the video controller			_videoController.addVideoEntry( videoEntry );			// Set the video object			_videoController.setVideoObject( vidPlayerInstance.getVideoObject() );			//			_videoController.setReportingIdentifier( vidName );			// Set the volume to nothing			//_videoController.setVolume(0);			isMuted = true;			// Make sure the video will not show once complete			_videoController.setVideoCompleteDisplay( EnhancedVideoController.VIDEO_COMPLETE_HIDE_VIDEO );			// Set the callback for when the video is complete			_videoController.setVideoCompleteCallback( onVideoEnd );			// Add the video item to the end of the playlist.			vidPlayerInstance.getPlaylist().addVideoController( _videoController );						// Resize the video accordingly			vidPlayerInstance.width = vidWidth;			vidPlayerInstance.height = vidHeight;			vidPlayerInstance.x = vidX;			vidPlayerInstance.y = vidY;						// Trace the number of videos in the playlist			var numVideos = playlist.getNumberOfVideoControllers()			trace("[VIDEO] Videos in the playlist: ", numVideos);		}				protected function jumpToVideo( vidNum:int ):void		{			//vidPlayerInstance.skipTo(vidNum);			playlist.skipTo(vidNum);		}				protected function startPlaylist( auto:Boolean=false, muted:Boolean=true ):void		{			trace("[VIDEO] Start the playlist");			playlist.getCurrentVideoController().play();						//muteVideo();						//playlist.start();		}		override protected function onClick( e:PaidMediaEvent ):void		{			trace("[VIDEO] Main clicktag");			// Bring in the functionality from the overriden method			super.onClick( e );			// Check to see if the video is paused			var currState = _videoController.getPlayerState();			trace("[VIDEO] CURRENT STATE IS " + currState )			// Check the video current state			switch ( currState )			{				case StoppedState:					// If video is stopped, do nothing				break;												default:					// If video is anything but stopped, stop it					stopVideo();				break;			}		}		protected function videoMouseOver( e:MouseEvent ):void		{			dispatchEvent( new PaidMediaEvent( PaidMediaEvent.MOUSE_OVER ) );		}				protected function videoMouseOut( e:MouseEvent ):void		{			dispatchEvent( new PaidMediaEvent( PaidMediaEvent.MOUSE_OUT ) );		}				protected function playVideo():void		{			trace("[VIDEO] Play video");			// The video is now playing			isVidPlaying = true;			// Toggles which movie clip to show			vidCntrl.gotoAndStop(1);			// Make sure the video is visible;			//vidPlayerInstance.visible = true;			// Play the video//			vidPlayerInstance.play();			_videoController.play();		}		protected function pauseVideo():void		{			isVidPlaying = false;			// Toggles which movie clip to show			vidCntrl.gotoAndStop(2);			// Pause the video;//			vidPlayerInstance.pause();			_videoController.pause();		}		protected function replayVideo( e:MouseEvent ):void		{			trace("[VIDEO] Replay Clicked");			// Tell the rest of the ad that the replay has been clicked			dispatchEvent(new PaidMediaEvent(PaidMediaEvent.VIDEO_REPLAY));			// Trigger the user counter in DC			_videoController.replay();			// Make sure the player is visible			vidPlayerInstance.visible = true;			// The video is now playing			isVidPlaying = true;			// Unmute the video			if( _videoController.getVolume() == 0 )			{				unmuteVideo();			}					}		private function toggleVideo( e:MouseEvent ):void		{			trace("[VIDEO] Video toggle");			// Checks to see if the video is playing			if (! isVidPlaying)			{				//trace("Play it");				// Yes it is, unpause it				playVideo();			}			else			{				//trace("Pause it");				// No it isn't, pause it				pauseVideo();			}		}		private function toggleSound( e:MouseEvent ):void		{			// Checks to see if it should mute or unmute			if (isMuted)			{				//trace("Unmute it");				// Yes it is, unmute it				unmuteVideo();			}			else			{				//trace("Mute it");				// No it isn't, mute it				muteVideo();			}		}		protected function muteVideo():void		{			isMuted = true;			// Mute the video//			vidPlayerInstance.mute();			_videoController.mute();//			var thisCntrl = playlist.getCurrentVideoController()//			thisCntrl.mute();			// Toggles which movie clip to show;			vidSound.gotoAndStop(1);		}		protected function unmuteVideo():void		{			isMuted = false;			// Unmute the video//			vidPlayerInstance.unmute()			_videoController.unmute();//			var thisCntrl = playlist.getCurrentVideoController()//			thisCntrl.unmute();			// Toggles which movie clip to show;			vidSound.gotoAndStop(2);		}		private function onCue( e:StudioVideoEvent ):void		{			//trace("[VIDEO] Cue");			// Dispatch the event to be heard			dispatchEvent(new PaidMediaEvent(PaidMediaEvent.ON_VIDEO_CUE));		}		private function onVideoEnd( e:StudioVideoEvent=null ):void		{			trace("[VIDEO] Video is now over");			// Video is no longer playing			isVidPlaying = false;			// Dispatch the event to be heard			dispatchEvent(new PaidMediaEvent(PaidMediaEvent.ON_VIDEO_END));		}		protected function stopVideo():void		{			// Hide video			vidPlayerInstance.visible = false;			// Make sure the video is stopped//			vidPlayerInstance.stop();			_videoController.stop();			//pauseVideo();			// Dispatch the event the video is over			onVideoEnd();		}	}}