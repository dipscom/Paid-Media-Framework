package com.pedrotavares.paidmedia.platforms.doubleclick{	// CUSTOM CLASSE IMPORTS	import com.pedrotavares.paidmedia.platforms.doubleclick.*;	import com.pedrotavares.paidmedia.events.PaidMediaEvent;	// DOUBLECLICK IMPORTS	import com.google.ads.studio.events.StudioVideoEvent;	import com.google.ads.studio.video.*;	// FLASH IMPORTS	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.display.Stage;	public class RichVideo extends RichUnit	{		// Video Vars		protected var _videoController			:EnhancedVideoController;		protected var videoEntry				:VideoEntry;		protected var playlist					:Playlist;				protected var vidPlayerInstance			:VideoPlayerAdvanced;		protected var isVidPlaying				:Boolean;		protected var isMuted					:Boolean;				protected var vidEntry					:String;		protected var videoHolder				:MovieClip;		protected var vidCntrl					:MovieClip;		protected var vidSound					:MovieClip;		protected var vidRply					:MovieClip;		protected var vidWidth					:int;		protected var vidHeight					:int;		protected var vidX						:int;		protected var vidY						:int;		protected var vidName					:String;		public function RichVideo()		{			// constructor code			trace("[VIDEO] All good, don't forget to initialize the startDcVideo function after loading the rich unit");		}		protected function setupVideo(vidEntry:String, videoHolder:MovieClip, vidCntrl:MovieClip, vidSound:MovieClip, vidRply:MovieClip=null, vidWidth:int=100, vidHeight:int=100, vidX:int=0, vidY:int=0, vidName:String="Trailer" ):void		{			/* TO DO:			Change vidEntry to an array to permit several videos per ad			Add an array and a loop to create new videoControllers and videoEntries for multiple video support			*/			// Define video stats for future use:			this.vidEntry = vidEntry;			this.videoHolder = videoHolder;			this.vidCntrl = vidCntrl; 			this.vidSound = vidSound;			this.vidRply = vidRply;			this.vidWidth = vidWidth;			this.vidHeight = vidHeight;			this.vidX = vidX;			this.vidY = vidY;			this.vidName = vidName;						// Video Player setup			vidPlayerInstance = new VideoPlayerAdvanced();			vidPlayerInstance.width = vidWidth;			vidPlayerInstance.height = vidHeight;			vidPlayerInstance.x = vidX;			vidPlayerInstance.y = vidY;			videoHolder.addChild(vidPlayerInstance);			// Create a video controller			_videoController = new EnhancedVideoController();			//_videoController.setReportingIdentifier(vidName);			_videoController.setReportingIdentifier("Trailer");			// Create a video entry;			videoEntry = new VideoEntry(vidEntry);			_videoController.addVideoEntry(videoEntry);			// Playlist setup;			playlist = vidPlayerInstance.getPlaylist();			// Stops the playlist from autoplaying all items;			playlist.setAutoAdvanceVideoOnComplete(false);			// Starts the videos muted;			playlist.setStartMuted(true);			// Add the video item to the end of the playlist.			vidPlayerInstance.getPlaylist().addVideoController(_videoController);			//isVidPlaying = true;			vidPlayerInstance.mute();			isMuted = true;						// Assign the video holder to the instance in the stage;			this.videoHolder = videoHolder;			// Assign the video controller movieClip instances to the relevant variable			this.vidCntrl = vidCntrl;			vidCntrl.gotoAndStop(1);			this.vidSound = vidSound;			vidSound.gotoAndStop(1);			this.vidRply = vidRply;			vidRply.gotoAndStop(1);			// Put the clicktag on top of the video			// The clicktag instance comes from the "DoubleclickRich.as" class			addChild(clicktag_mc);			// Put the video controls on top of the clicktag			addChild(vidCntrl);			addChild(vidSound);			addChild(vidRply);			// Event listeners			// Consider adding a buffering listener			vidPlayerInstance.addEventListener( StudioVideoEvent.COMPLETE, onVideoEnd );			// Listen to cue points;			vidPlayerInstance.addEventListener( StudioVideoEvent.NET_STREAM_CUE_POINT, onCue );			// Video controls			vidCntrl.addEventListener( MouseEvent.CLICK, toggleVideo );			vidSound.addEventListener( MouseEvent.CLICK, toggleSound );			// Remove video replay			vidRply.removeEventListener( MouseEvent.CLICK, replayVideo );			vidRply.removeEventListener( MouseEvent.MOUSE_OVER, videoMouseOver );			vidRply.removeEventListener( MouseEvent.MOUSE_OVER, videoMouseOut );			vidCntrl.buttonMode = vidSound.buttonMode = vidRply.buttonMode = true;			vidCntrl.mouseChildren = vidSound.mouseChildren = vidRply.mouseChildren = false;		}				protected function addExtraVideo( vidEntry:String ):void		{			trace( "[VIDEO] Add a new video to the playlist");			// Create a video entry;			videoEntry = new VideoEntry(vidEntry);			_videoController.addVideoEntry(videoEntry);			// Add the video item to the end of the playlist.			vidPlayerInstance.getPlaylist().addVideoController(_videoController);		}				protected function jumpToVideo( vidNum:int ):void		{			vidPlayerInstance.skipTo(vidNum);		}		protected function onClickTag( e:PaidMediaEvent ):void		{			trace( "[VIDEO] Main clicktag");			// Check to see if the video is playing			if (isVidPlaying)			{				trace( "[VIDEO] Video is playing");				// Stop and remove video				stopVideo();			}			else			{				trace( "[VIDEO] Video is NOT playing");				// Check to see if the video is paused				var currState = _videoController.getPlayerState();				trace("[VIDEO] CURRENT STATE IS " + currState )				if( currState is PausedState )				{					trace("[VIDEO] Stop");					// Video was paused, not finished - remove it					stopVideo();				}			}		}		protected function videoMouseOver( e:MouseEvent ):void		{			dispatchEvent( new PaidMediaEvent( PaidMediaEvent.MOUSE_OVER ) );		}				protected function videoMouseOut( e:MouseEvent ):void		{			dispatchEvent( new PaidMediaEvent( PaidMediaEvent.MOUSE_OUT ) );		}				protected function playVideo():void		{			trace("[VIDEO] Play video");			// The video is now playing			isVidPlaying = true;			// Toggles which movie clip to show			vidCntrl.gotoAndStop(1);			// Make sure the video is visible;			vidPlayerInstance.visible = true;			// Play the video			vidPlayerInstance.play();		}		protected function pauseVideo():void		{			isVidPlaying = false;			// Toggles which movie clip to show			vidCntrl.gotoAndStop(2);			// Pause the video;			vidPlayerInstance.pause();		}		protected function replayVideo(e:MouseEvent):void		{			trace("[VIDEO] Replay Clicked");			dispatchEvent(new PaidMediaEvent(PaidMediaEvent.VIDEO_REPLAY));			//Restart the video			setupVideo(vidEntry, videoHolder, vidCntrl, vidSound, vidRply, vidWidth, vidHeight, vidX, vidY, vidName );			playVideo();			//trace(vidEntry, videoHolder, vidCntrl, vidSound, vidRply, vidWidth, vidHeight, vidX, vidY, vidName);		}		private function toggleVideo(e:MouseEvent):void		{			trace("[VIDEO] Video toggle");			// Checks to see if the video is playing			if (! isVidPlaying)			{				//trace("Play it");				// Yes it is, unpause it				playVideo();			}			else			{				//trace("Pause it");				// No it isn't, pause it				pauseVideo();			}		}		private function toggleSound(e:MouseEvent):void		{			// Checks to see if it should mute or unmute			if (isMuted)			{				//trace("Unmute it");				// Yes it is, unmute it				unmuteVideo();			}			else			{				//trace("Mute it");				// No it isn't, mute it				muteVideo();			}		}		protected function muteVideo():void		{			isMuted = true;			// Mute the video			vidPlayerInstance.mute();			// Toggles which movie clip to show;			vidSound.gotoAndStop(1);		}		protected function unmuteVideo():void		{			isMuted = false;			// Unmute the video			vidPlayerInstance.unmute();			// Toggles which movie clip to show;			vidSound.gotoAndStop(2);		}		private function onCue(e:StudioVideoEvent):void		{			//trace("[VIDEO] Cue");			// Dispatch the event to be heard			dispatchEvent(new PaidMediaEvent(PaidMediaEvent.ON_VIDEO_CUE));		}		private function onVideoEnd(e:StudioVideoEvent=null):void		{			trace("[VIDEO] Video is now over");			// Video is no longer playing			isVidPlaying = false;			// Dispatch the event to be heard			dispatchEvent(new PaidMediaEvent(PaidMediaEvent.ON_VIDEO_END));			// Remove the event listeners			vidPlayerInstance.removeEventListener( StudioVideoEvent.COMPLETE, onVideoEnd );			// Listen to cue points;			vidPlayerInstance.removeEventListener( StudioVideoEvent.NET_STREAM_CUE_POINT, onCue );			// Remove Video controls			vidCntrl.removeEventListener( MouseEvent.CLICK, toggleVideo );			vidSound.removeEventListener( MouseEvent.CLICK, toggleSound );			// Add video replay			vidRply.addEventListener( MouseEvent.CLICK, replayVideo );			vidRply.addEventListener( MouseEvent.MOUSE_OVER, videoMouseOver );			vidRply.addEventListener( MouseEvent.MOUSE_OVER, videoMouseOut );			// Remove the video player			vidPlayerInstance.unload();		}		protected function stopVideo():void		{			// Hide video			vidPlayerInstance.visible = false;			// Make sure the video is stopped			vidPlayerInstance.stop();			// Dispatch the event the video is over			onVideoEnd();		}	}}