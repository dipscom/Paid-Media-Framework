package com.pedrotavares.paidmedia.platforms.doubleclick{	/*	First and foremost:	Create your flash ".fla" file;	Go to >Commands>DoubleClick Studio v2>Insert v2 HTML Enabler;	Click "OK";	Delete the "Studio Enabler V2" layer as it's duplicate code that is already in this class;	Then, create a "Loader_main" class for it;	And extend the Doubleclick_loader class	*/	// CUSTOM IMPORTS	import com.pedrotavares.paidmedia.events.PaidMediaEvent;	// DOUBLECLICK IMPORTS	import com.google.ads.studio.HtmlEnabler;	import com.google.ads.studio.display.StudioLoader;	import com.google.ads.studio.events.StudioEvent;	import com.google.ads.studio.innovation.lightbox.proxy.Lightbox;	// FLASH IMPORTS	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.net.URLRequest;	import flash.system.Security;		// Security settings	Security.allowDomain("www.gstatic.com");	public class PoliteLoaderLBox extends MovieClip	{		// Variable to hold reference to child swf.		protected var childSwf:MovieClip;		// Variable to hold the child swf instance name.		protected var childSwf_name:String;		// Variable to hold the child mc itself		protected var holderMc:MovieClip;		// Variable to hold the expanded panel		protected var expSwf:MovieClip;		// Variable to hold the parent timeline		protected var parentTimeline:Object;		// The lightbox component		protected var lightbox:Lightbox;		// StudioLoader extends directly from Adobe's Loader class, but also locates		// file names in the Studio UI.		protected var loader:StudioLoader; 		// Initialize the Enabler		public var enabler:HtmlEnabler = HtmlEnabler.getInstance();		// Create an empty mc for the expanding behaviour		protected var exp_bt:MovieClip  = new MovieClip();		// General Vars		protected var lBoxW:int;		protected var lBoxH:int;		protected var lExpW:int;		protected var lExpH:int;		public function PoliteLoaderLBox():void		{					//trace("[DOUBLECLICK LOADER] All good");		}				public function politeLoad(childSwf_name:String, holderMc:MovieClip, lBoxW:int, lBoxH:int, lExpW:int, lExpH:int, lExpPath:String ):void		{			// Start doubleclick enabler			enabler.init(this);						// Initialize the lightbox;			lightbox = new Lightbox();			// Set the parent file as a global data			parentTimeline = this;			enabler.setGlobalData("parentObj", parentTimeline);			// Assign the vars received to the general variables for future re-use			this.lBoxW = lBoxW;			this.lBoxH = lBoxH;			this.lExpW = lExpW;			this.lExpH = lExpH;						// Component size represents the collapsed size, and it will automatically;			// center itself to the stage for smoother expands.			lightbox.width = lBoxW;			lightbox.height = lBoxH;			lightbox.proxy.autoPosition = true;			// Add the lightbox to the empty movie clip as it will contain the loaded child swf.;			holderMc.addChild(lightbox);			// Set this true for an animated collapse			lightbox.proxy.animatedCollapse = false;						// REQUIRED. Set the expansion size. Your Flash stage size must be large			// enough to accommodate both the collapsed and expanded size.			lightbox.proxy.expandedWidth = lExpW;			lightbox.proxy.expandedHeight = lExpH;			// You can have a child file load/unload automatically on expand/collapse.			lightbox.proxy.expandedFilePath = lExpPath;						// Assign the childSwf to the instance variable			this.childSwf_name = childSwf_name;						// Assign the holder to the instance variable			this.holderMc = holderMc;						// Register for the PAGE_LOADED event to ensure polite loading of child swf			enabler.addEventListener(StudioEvent.PAGE_LOADED, pageLoadHandler);			// Add listeners to perform custom actions when creative expands/collapses.;			lightbox.addEventListener("expandComplete", expandCompleteHandler);			lightbox.addEventListener("collapse", collapseHandler);			lightbox.addEventListener("collapseComplete", collapseCompleteHandler);						//trace("[DOUBLECLICK LOADER] childSwf_name is: ", childSwf_name);		}				// Fired when the page has loaded.		private function pageLoadHandler(e:StudioEvent):void 		{			// Page has loaded, ok to politely load assets now			loader = new StudioLoader();			// Register handler to get notified when child swf is loaded			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, loadComplete); 			// Start to load the child swf			loader.load(new URLRequest(childSwf_name));			// Add content to the component to get automatic positioning & visibility;			// during expand & collapse.			lightbox.proxy.addCollapsedContent(loader);			//trace("[DOUBLECLICK LOADER] pageLoadHandler");		}				private function loadComplete(e:Event):void		{			// Store reference to the loaded swf			childSwf = MovieClip(e.target.content);			// Create the empty expanding button			exp_bt.name = "clicktag_mc";			exp_bt.graphics.beginFill(0xFFCC88);			exp_bt.graphics.drawRect(0, 0, 10, 10);			exp_bt.graphics.endFill();			// Define the size of the expand button			exp_bt.width = lBoxW-2;// -2 is so it's one pixel smaller than the ad. It seems to help			exp_bt.height = lBoxH;			// Place the expand button in the middle of the ad			exp_bt.x = (lExpW*.5) - (lBoxW*.5) + 1;// +1 is to align the button in the middle of the ad			exp_bt.addEventListener(MouseEvent.ROLL_OVER, rollOverHandler);			exp_bt.buttonMode = true;			exp_bt.alpha = 0;			// Add the button to the display list			addChild(exp_bt);			// Dispatch an event once load is complete			dispatchEvent( new PaidMediaEvent( PaidMediaEvent.LOAD_COMPLETE ) );		}				private function rollOverHandler(event:MouseEvent):void		{			trace("[RICH] rollover" );			lightbox.proxy.expand();		}				private function expandCompleteHandler(event:Event):void		{			trace("expanded");			exp_bt.visible = false;		}				private function collapseHandler(event:Event):void		{			// If you used animatedCollapse, you would start that animation now.			// But don't forget to call the following when animation completes:			//lightbox.proxy.endAnimatedCollapse();		}				private function collapseCompleteHandler(event:Event):void		{			//trace("collapse completed");			exp_bt.visible = true;		}	}}