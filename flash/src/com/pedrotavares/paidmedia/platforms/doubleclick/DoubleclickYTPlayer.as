package com.pedrotavares.paidmedia.platforms.doubleclick{	// CUSTOM CLASSE IMPORTS	import com.pedrotavares.paidmedia.platforms.doubleclick.DoubleclickRich;	import com.pedrotavares.paidmedia.events.PaidMediaEvent;	// DOUBLECLICK IMPORTS	import com.google.ads.studio.innovation.youtube.player.proxy.YTPlayer;	import com.google.ads.studio.innovation.youtube.player.YTPlayerEvent;	// FLASH IMPORTS	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.system.Security;		// Security settings		Security.allowDomain("www.gstatic.com");		Security.allowDomain("www.youtube.com");		Security.allowDomain("s.ytimg.com");	public class DoubleclickYTPlayer extends DoubleclickRich	{		// Video Vars		protected var vidPlayerInstance:YTPlayer;				protected var isVidPlaying:Boolean;		protected var isMuted:Boolean;		protected var videoHolder:MovieClip;		protected var vidCntrl:MovieClip;		protected var vidSound:MovieClip;		protected var vidRply:MovieClip;				private var isFullScreen:Boolean = false;		public function DoubleclickYTPlayer()		{			// constructor code			//trace("[VIDEO] All good");		}				protected function startDcYTPlayer():void		{			startDcRich();		}		public function setupVideo(	vidEntry	:String, 									videoHolder	:MovieClip, 									vidCntrl	:MovieClip, 									vidSound	:MovieClip, 									vidRply		:MovieClip = null, 									vidWidth	:int = 100, 									vidHeight	:int = 100, 									vidX		:int = 0, 									vidY		:int = 0, 									playType	:String = "preview" 									):void		{			/* TO DO:						*/			// Video Player setup			vidPlayerInstance = new YTPlayer();			vidPlayerInstance.proxy.videoId = vidEntry;			vidPlayerInstance.proxy.autoPlayType = playType;			vidPlayerInstance.proxy.controlsType = "autohide";			vidPlayerInstance.proxy.hdOnFullscreen = true;			vidPlayerInstance.proxy.previewDuration = 10;			vidPlayerInstance.proxy.width = vidWidth;			vidPlayerInstance.proxy.height = vidHeight;			vidPlayerInstance.proxy.x = vidX;			vidPlayerInstance.proxy.y = vidY;			videoHolder.addChild(vidPlayerInstance);			isMuted = true;			// Listen to the end of the video			// Consider adding a buffering listener			vidPlayerInstance.addEventListener(YTPlayerEvent.VIDEO_COMPLETE,onVideoEnd);			// Listen to cue points;			vidPlayerInstance.addEventListener(YTPlayerEvent.VIDEO_CUE_RANGE_ENTER,onCue);			// Listen to see if the user goes full screen or exits it			vidPlayerInstance.addEventListener(YTPlayerEvent.VIDEO_FULLSCREEN,fullScreen);			vidPlayerInstance.addEventListener(YTPlayerEvent.VIDEO_EXIT_FULLSCREEN,fullScreenExit);			// Assign the video holder to the instance in the stage;			this.videoHolder = videoHolder;			// Assign the video controller movieClip instances to the relevant variable			this.vidCntrl = vidCntrl;			vidCntrl.gotoAndStop(1);			this.vidSound = vidSound;			vidSound.gotoAndStop(1);			this.vidRply = vidRply;			vidRply.gotoAndStop(1);			// Put the video controls on top of the clicktag			addChild(vidCntrl);			addChild(vidSound);			addChild(vidRply);			// Listen to the buttons on stage			addEventListener( PaidMediaEvent.CLICK_CLICKTAG, onClickTag );			vidCntrl.addEventListener( MouseEvent.CLICK, toggleVideo );			vidSound.addEventListener( MouseEvent.CLICK, toggleSound );			vidRply.addEventListener( MouseEvent.CLICK, replayVideo );			vidCntrl.buttonMode = vidSound.buttonMode = vidRply.buttonMode = true;		}		private function onClickTag( e: PaidMediaEvent ):void		{			//trace( "[VIDEO] Main clicktag");			// Check to see if the video is playing			if (isVidPlaying)			{				//trace( "[VIDEO] Video is playing");				// Stop and remove video				removeVideo();			}			else			{				//trace( "[VIDEO] Video is NOT playing");				// Do nothing, the clicktag has been actioned			}		}		protected function playVideo():void		{			//trace("[VIDEO] Play video");			// The video is now playing			isVidPlaying = true;			// Toggles which movie clip to show			vidCntrl.gotoAndStop(1);			// Make sure the video is visible;			vidPlayerInstance.visible = true;			// Play the video//			vidPlayerInstance.proxy.play();		}		protected function pauseVideo():void		{			isVidPlaying = false;			// Toggles which movie clip to show			vidCntrl.gotoAndStop(2);			// Pause the video;//			vidPlayerInstance.proxy.pause();		}		protected function replayVideo(e:MouseEvent):void		{			//trace("Replay Clicked");			/*// Hide replay button			vidRply.visible = false;*/			// Dispatch the event			dispatchEvent(new PaidMediaEvent(PaidMediaEvent.VIDEO_REPLAY));			// The video is now playing			isVidPlaying = true;			// Toggles which movie clip to show			vidCntrl.gotoAndStop(1);			// Make sure the video is visible;			vidPlayerInstance.visible = true;			//Restart the video			vidPlayerInstance.proxy.replay();		}		private function toggleVideo(e:MouseEvent):void		{			//trace("Video toggle");			// Checks to see if the video is playing			if (! isVidPlaying)			{				//trace("Play it");				// Yes it is, unpause it				playVideo();			}			else			{				//trace("Pause it");				// No it isn't, pause it				pauseVideo();			}		}		private function toggleSound(e:MouseEvent):void		{			// Checks to see if it should mute or unmute			if (isMuted)			{				//trace("Unmute it");				// Yes it is, unmute it				unmuteVideo();			}			else			{				//trace("Mute it");				// No it isn't, mute it				muteVideo();			}		}		protected function muteVideo():void		{			isMuted = true;			// Mute the video//			vidPlayerInstance.proxy.mute();			// Toggles which movie clip to show;			vidSound.gotoAndStop(1);		}		protected function unmuteVideo():void		{			isMuted = false;			// Unmute the video//			vidPlayerInstance.proxy.unMute();			// Toggles which movie clip to show;			vidSound.gotoAndStop(2);		}		private function onCue(e:YTPlayerEvent):void		{			//trace("[VIDEO] cue");		}		private function onVideoEnd(e:YTPlayerEvent):void		{			//trace("[VIDEO] Video is now over");			// See if user is on full screen			if( isFullScreen == true )			{				// If so, exit it				vidPlayerInstance.proxy.exitFullScreen();			}			dispatchEvent(new PaidMediaEvent(PaidMediaEvent.ON_VIDEO_END));			removeVideo();		}		protected function removeVideo():void		{			//trace("[VIDEO] Remove video");			// Video is no longer playing			isVidPlaying = false;			// Hide video			vidPlayerInstance.visible = false;			/*// Hide controls			vidCntrl.visible = false;			vidSound.visible = false;			// Show replay button			vidRply.visible = true;*/			// Make sure the video is stopped			vidPlayerInstance.proxy.pause();		}				private function fullScreen(e:YTPlayerEvent):void		{			isFullScreen = true;		}				private function fullScreenExit(e:YTPlayerEvent):void		{			isFullScreen = false;		}	}}