package com.pedrotavares.paidmedia.utils.loopingGallery{	// GREENSOCK IMPORTS	import com.greensock.*;	import com.greensock.easing.*;	import com.greensock.plugins.*;	// FLASH IMPORTS	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.*;	public class GallerySetup extends MovieClip	{		private var galleryItems:MovieClip;		private var galleryChild:MovieClip;		private var totalItems:Array;		private var indexArr:Array;		private var moveLeft_mc:MovieClip;		private var moveRight_mc:MovieClip;		private var spread:int;		public function GallerySetup(galleryItems:MovieClip, moveLeft_mc:MovieClip, moveRight_mc:MovieClip, spread:int)		{			// Activate greesock plugins			TweenPlugin.activate([ScalePlugin,AutoAlphaPlugin]);			// Get the gallery mc and assign to the current var;			this.galleryItems = galleryItems;			this.moveLeft_mc = moveLeft_mc;			this.moveRight_mc = moveRight_mc;			// Get the amount to spread the mcs by and assign to its var			this.spread = spread;			// Wait until this is palced on the stage			this.addEventListener(Event.ADDED_TO_STAGE, handleAddedToStage);			//trace("Gallery Setup");		}		private function handleAddedToStage(event:Event):void		{			// Stop listening to the ADDED_TO_STAGE			this.removeEventListener(Event.ADDED_TO_STAGE, handleAddedToStage);						moveLeft_mc.addEventListener(MouseEvent.CLICK, moveLeft);			moveRight_mc.addEventListener(MouseEvent.CLICK, moveRight);			moveLeft_mc.buttonMode = moveRight_mc.buttonMode = true;			// Create a new array to hold all children			totalItems = new Array();			// Create a new array to hold the index of each child			indexArr = new Array();			// Loop thru the gallery mc and check how many children are there			for (var i:int=0; i < galleryItems.numChildren; i++)			{				// Assign each child to a mc				galleryChild = galleryItems.getChildAt(i) as MovieClip;				// Push the child into an array				totalItems.push(galleryChild);				// Push the index number into the array				indexArr.push(i);			}			//trace("Added to the stage");			//setupIndexes();			updatePositions();		}				/*private function setupIndexes():void		{			// Set up the default state of the gallery			for(var i:int = 0; i < 45; i++)			{				//TweenMax.delayedCall(i, moveRight);				TweenMax.delayedCall(i, moveLeft);			}		}*/		private function updatePositions()		{			for(var i:int = 0; i < totalItems.length; i++)			{				var posX;				var posY;				var thisScale;				var thisVisibility;								switch (indexArr[i]) 				{						case 0:							posX = -spread*1.8;							thisScale = .6;							thisVisibility = 1						break;												case 1:							posX = -spread;							thisScale = .8;							thisVisibility = 1						break;												case 2:							posX = 0;							thisScale = 1;							thisVisibility = 1							// This is the foremost item							galleryItems.setChildIndex(totalItems[i], galleryItems.numChildren - 1);						break;												case 3:							posX = +spread;							thisScale = .8;							thisVisibility = 1						break;												case 4:							posX = +spread*1.8;							thisScale = .6;							thisVisibility = 1							// This is quite far back							galleryItems.setChildIndex(totalItems[i], 1);						break;												default:							posX = 0;							posY = 0;							thisScale = .5;							thisVisibility = .9							// Send it to the back of the pile							galleryItems.setChildIndex(totalItems[i], 0);						break;				}				TweenMax.to(totalItems[i], .3, {x:posX, scale:thisScale, autoAlpha:thisVisibility} );			}		}				private function moveRight(e:MouseEvent):void		{			for(var i:int = 0; i < totalItems.length; i++)			{				indexArr[i]++;				if(indexArr[i] == totalItems.length)				{					indexArr[i] = 0;				}			}			updatePositions();			//trace("Start Over");		}				private function moveLeft(e:MouseEvent):void		{			for(var i:int = 0; i < totalItems.length; i++)			{				indexArr[i]--;				if(indexArr[i] < 0)				{					indexArr[i] = totalItems.length -1;				}			}			updatePositions();			//trace("Start Over");		}	}}