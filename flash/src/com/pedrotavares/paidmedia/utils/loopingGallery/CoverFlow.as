package com.pedrotavares.paidmedia.utils.loopingGallery{	// GREENSOCK IMPORTS	import com.greensock.TweenLite;	import com.greensock.plugins.TweenPlugin;	import com.greensock.plugins.ColorMatrixFilterPlugin;	// FLASH IMPORTS	import flash.display.Sprite;	import flash.display.Loader;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.net.URLRequest;	import flash.display.MovieClip;			public class CoverFlow extends MovieClip	{		var container:Sprite;// just a container to hold all the thumbnails		var thumbs:Array;// array of thumbnail display objects (Sprites)		var showing:int;// keeps track of the current showing thumbnail		var tsize:int = 200;// size of your thumbnail		var thumbPaths:Array;// this is your array of image urls to load from		public function CoverFlow()		{			// constructor code			TweenPlugin.activate([ColorMatrixFilterPlugin]);						this.addEventListener(Event.ADDED_TO_STAGE, handleAddedToStage);		}				private function handleAddedToStage(event:Event):void		{			stage.addEventListener(KeyboardEvent.KEY_DOWN,keydown);			createGallery();						this.removeEventListener(Event.ADDED_TO_STAGE, handleAddedToStage);		}		function createGallery()		{						thumbs=new Array();			container=new Sprite();			container.y = stage.stageHeight / 2;			addChild(container);			var thumb:Sprite;			var l:Loader;			for (var i=0; i<thumbPaths.length; i++)			{// create the thumbs				thumb=new Sprite();				// draw background box with registration at center				thumb.graphics.beginFill(0x333333);				thumb.graphics.drawRect(-tsize/2,-tsize/2,tsize,tsize);				thumb.name = "t" + i;				thumb.addEventListener(MouseEvent.CLICK,clickthumb);				// use a Loader to load image, registration at center				l=new Loader();				l.x = l.y =  -  tsize / 2;				l.load(new URLRequest(thumbPaths[i]));				thumb.addChild(l);				thumbs.push(thumb);				container.addChild(thumb);			}			showing = 0;			show();		}		function moveToPlace()		{			var diff:int;// distance from showing			var dir:int;// direction from showing			var gx:Number;// x position it will move to			var scale:Number;// scale it will transform to			var rotY:Number;// rotation Y			var br:Number;// brightness			for (var i:int=0; i<thumbs.length; i++)			{				diff = i - showing;// distance from showing				dir = Math.abs(diff) / diff;// -1 or 1				if (i==showing)				{					gx = stage.stageWidth / 2;					scale = 1;					rotY = 0;					br = 1;				}				else				{					gx = 250 + (100 * dir) + (diff * 30);					scale = 0.5 + Math.abs(diff) * 0.05;					if (scale>1.2)					{						scale = 1.2;					}					rotY = 90 * dir;					br=1-(Math.abs(diff)*0.4);					if (br<-3)					{						br = -3;					}				}				// tween to it				TweenLite.to(thumbs[i],0.5,{colorMatrixFilter:{brightness:br},scaleX:scale,scaleY:scale,x:gx,rotationY:rotY});			}		}		function zOrderSort():void		{			var obj:Object;			var zArray:Array=new Array();			var l:int = thumbs.length;			for (var i:int=0; i<l; i++)			{				// save thumb and its distance from showing into array				obj={img:thumbs[i],dist:Math.abs(showing-i)};				zArray.push(obj);			}			//sort array by distance			zArray.sortOn("dist",Array.NUMERIC|Array.DESCENDING);			// assign depths according to sorted array;			for (i=0; i<l; i++)			{				container.setChildIndex(zArray[i].img,i);			}		}		function show()		{			zOrderSort();			moveToPlace();		}		function keydown(e:KeyboardEvent):void		{			switch (e.keyCode)			{				case 39 :// if press right key					if (showing+1<thumbs.length)					{						showing++;						show();					}					break;				case 37 :// if press left key					if (showing-1>-1)					{						showing--;						show();					}					break;			}		}		function clickthumb(e:MouseEvent):void		{			var n:int = int(e.currentTarget.name.substr(1));			if (showing==n)			{				// when user clicks the thumb that is currently showing				// do something (i.e. show full image)			}			else			{				showing = n;				show();			}		}	}}